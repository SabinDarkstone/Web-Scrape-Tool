using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using Visco_Web_Scrape_v2.Scripts;
using Visco_Web_Scrape_v2.Search.Items;
using Excel = Microsoft.Office.Interop.Excel;

namespace Visco_Web_Scrape_v2.Forms {

	public partial class ResultViewer : Form {

		private readonly Configuration config;
		private readonly CombinedResults results;

		public ResultViewer(Configuration configuration, CombinedResults results) {
			InitializeComponent();

			config = configuration;
			this.results = results;
		}

		private void ResultViewer_Shown(object sender, EventArgs e) {
			// Initialize progress bar
			var pageCount = results.AllResults.Count;
			progressBook.Maximum = pageCount;

			ExportToFile();
		}

		private void ExportToFile() {
			// Indicate the program is saving the file
			btnStatusClose.Text = "Saving...";
			btnStatusClose.Enabled = false;

			switch (config.ExportMethod) {
				case Configuration.ExportType.Excel:
					ExportToExcel(false);
					break;

				case Configuration.ExportType.Plain:
					ExportToPlainText();
					break;

				case Configuration.ExportType.Xml:
					ExportToXml();
					break;

				default:
					throw new ArgumentOutOfRangeException();
			}
		}

		public void ExportToExcel(bool forEmail) {
			// Initialize excel interop and start application
			var excel = new Excel.Application {Visible = false};

			// Get a new workbook
			Excel.Workbook workbook = excel.Workbooks.Add(Missing.Value);

			// Go through each website and write to the file
			int currentRow;
			foreach (var website in results.AllResults) {
				progressBook.Value++;

				if (!website.StartedSearch) continue;

				currentRow = 1;

				// Add a new sheet
				Excel._Worksheet sheet = workbook.Worksheets.Add();
				sheet.Name = website.RootWebsite.Name;

				// Create sheet headers
				if (website.ResultList.Count == 0) {
					sheet.Cells[1, 1] = "No results found for enabled keywords";
					continue;
				} else {
					sheet.Cells[currentRow, 1] = "Website Url";
					sheet.Cells[currentRow, 2] = "Keywords Found";
					if (config.IncludeDate) sheet.Cells[currentRow, 3] = "Date Discovered";
				}

				progressSheet.Maximum = website.ResultList.Count;
				progressSheet.Value = 0;

				foreach (var result in website.ResultList) {
					progressSheet.Value++;

					if (config.OnlyNewResults) {
						if (!result.IsNewResult) {
							continue;
						}
					}

					currentRow++;
					var rng = sheet.Cells[currentRow, 1] as Excel.Range;
					Debug.Assert(rng != null, "rng != null");

					// Write page url
					rng.Hyperlinks.Add(rng, result.PageUrl, Missing.Value, string.IsNullOrEmpty(result.Context) ? "" : result.Context, result.PageUrl);

					// Write keywords
					var keywords = result.KeywordsOnPage.Aggregate("", (current, keyword) => current + (keyword.Text + ", "));
					var substring = keywords.Substring(0, keywords.Length - 2);
					sheet.Cells[currentRow, 2] = substring;

					// Write date
					if (config.IncludeDate) {
						var date = "";
						date += result.DiscoveryTimeUtc.ToLocalTime().Month + "/";
						date += result.DiscoveryTimeUtc.ToLocalTime().Day + "/";
						date += result.DiscoveryTimeUtc.ToLocalTime().Year;

						sheet.Cells[currentRow, 3] = date;
					}
				}

				// Autofit columns
				var aRange = sheet.UsedRange;
				aRange.Columns.AutoFit();
			}

			// Create summary sheet
			Excel._Worksheet summary = workbook.Worksheets.Add(Missing.Value);

			// General information
			summary.Cells[1, 1] = "Visco Lighting Search Results";
			summary.Cells[2, 1] = "Auto-generated by search application";

			// Settings file information
			summary.Cells[4, 1] = "Run Date";
			summary.Cells[4, 2] = results.LastRan.ToLocalTime().ToShortTimeString() +
				" on " + results.LastRan.ToLocalTime().ToShortDateString();
			summary.Cells[5, 1] = "Total Time";
			summary.Cells[5, 2] = results.GetCrawlTime();

			// Websites searched
			summary.Cells[7, 1] = "Websites Searched";
			summary.Cells[8, 1] = "Name";
			summary.Cells[8, 2] = "Results";
			summary.Cells[8, 3] = "Elapsed Time";
			summary.Cells[8, 4] = "Status";
			summary.Range["A7"].Font.Bold = true;
			currentRow = 8;
			foreach (var website in results.AllResults) {
				currentRow++;
				summary.Cells[currentRow, 1] = website.RootWebsite.Name;
				summary.Cells[currentRow, 3] = website.GetCrawlTime();
				if (!website.StartedSearch) {
					summary.Cells[currentRow, 4] = "Not Started";
				} else {
					if (website.CompletedSearch) {
						summary.Cells[currentRow, 4] = "Completed";
					} else {
						summary.Cells[currentRow, 4] = "Interrupted";
					}
				}

				if (config.OnlyNewResults) {
					summary.Cells[currentRow, 2] = website.ResultList.Count(i => i.IsNewResult);
				} else {
					summary.Cells[currentRow, 2] = website.ResultList.Count;
				}
			}

			// PageWords in search
			currentRow += 2;
			summary.Cells[currentRow, 1] = "Keywords Used";
			summary.Range["A" + currentRow].Font.Bold = true;
			foreach (var keyword in config.PageWords) {
				currentRow++;
				summary.Cells[currentRow, 1] = keyword.Text;
				summary.Cells[currentRow, 2] = (keyword.IsEnabled) ? "Enabled" : "Disabled";
			}

			// Finish formatting
			summary.Range["A1"].Font.Size = 28;
			summary.Range["A1:H1"].Merge();
			summary.Range["A2:H2"].Merge();
			summary.Range["B4:D4"].Merge();
			summary.Range["A:D"].Columns.AutoFit();
			summary.Name = "Summary";

			// Delete pre-existing "Sheet1"
			((Excel.Worksheet) excel.ActiveWorkbook.Sheets["Sheet1"]).Delete();

			btnStatusClose.Text = "Close";
			btnStatusClose.Enabled = true;

			if (forEmail) {
				excel.Visible = false;
				var date = results.LastRan;
				var filename = Reference.Files.ExportDirectory + "Results_" + date.Month + date.Date + date.Year;

				if (File.Exists(filename + ".xlsx")) {
					File.Delete(filename + ".xlsx");
				}

				workbook.SaveAs(filename, Excel.XlFileFormat.xlWorkbookDefault, Type.Missing, Type.Missing, false, false,
					Excel.XlSaveAsAccessMode.xlNoChange, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);
				workbook.Close();

				Marshal.ReleaseComObject(workbook);
				Marshal.ReleaseComObject(excel);
			} else {
				excel.Visible = true;
			}
		}

		private void ExportToPlainText() {
			throw new NotImplementedException("Plain text file export");
		}

		private void ExportToXml() {
			throw new NotImplementedException("Xml file export");
		}

		private void btnStatusClose_Click(object sender, EventArgs e) {
			Close();
		}
	}

}