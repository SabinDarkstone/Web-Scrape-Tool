using System;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using Visco_Web_Scrape_v2.Properties;
using Visco_Web_Scrape_v2.Scripts;
using Visco_Web_Scrape_v2.Scripts.Helpers;
using Visco_Web_Scrape_v2.Search.Items;
using Excel = Microsoft.Office.Interop.Excel;

namespace Visco_Web_Scrape_v2.Forms {

	public partial class ResultViewer : Form {

		public static class ExportProgress {
			public static int CurrentSheet { get; set; }
			public static int SheetCount { get; set; }
			public static int CurrentRow { get; set; }
			public static int RowCount { get; set; }
		}

		private readonly Configuration config;
		private readonly CombinedResults results;
		private readonly BackgroundWorker worker;

		private Excel.Application excel;
		private Excel.Workbook workbook;

		private bool isForEmail;

		public ResultViewer(Configuration configuration, CombinedResults results) {
			InitializeComponent();

			config = configuration;
			this.results = results;

			worker = new BackgroundWorker();
		}

		private void ResultViewer_Shown(object sender, EventArgs e) {
			// Initialize the worker
			worker.WorkerSupportsCancellation = false;
			worker.WorkerReportsProgress = true;
			worker.DoWork += worker_DoWork;
			worker.ProgressChanged += worker_ProgressChanged;
			worker.RunWorkerCompleted += worker_WorkCompleted;

			ExportToFile();
		}

		private void worker_DoWork(object sender, DoWorkEventArgs args) {
			var myWorker = sender as BackgroundWorker;
			if (myWorker == null) {
				MessageBox.Show(Resources.ExcelWorkerIsNull, Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);
				return;
			}

			// Initialize excel interop and start application in a hidden mode
			excel = new Excel.Application {Visible = false};

			// Set progressBook maximum value
			ExportProgress.SheetCount = results.AllResults.Count;

			// Create a new workbook
			workbook = excel.Workbooks.Add(Missing.Value);

			// Iterate through WebsiteResults
			int currentRow;
			LogHelper.Debug(results.AllResults.Count);
			foreach (var website in results.AllResults.Reverse()) {
				// Update progress information
				ExportProgress.CurrentSheet++;

				// Check if search on website was started
				if (!website.StartedSearch) {
					ExportProgress.RowCount = 1;
					ExportProgress.CurrentRow = 1;
					myWorker.ReportProgress(0);
					continue;
				}

				// Update progress information again
				ExportProgress.RowCount = website.ResultList.Count;

				// Add a new sheet for the website
				Excel.Worksheet sheet = workbook.Worksheets.Add();
				sheet.Name = website.RootWebsite.Name;

				// Create sheet title and table headers
				sheet.Cells[1, 1] = website.RootWebsite.Name;
				sheet.Cells[2, 1] = website.RootWebsite.Url;
				sheet.Range["A1"].Font.Size = 18;
				sheet.Range["A2"].Font.Size = 12;
				sheet.Range["A1:C1"].Merge();
				sheet.Range["A2:C2"].Merge();
				if (website.ResultList.Count > 0) {
					sheet.Cells[4, 1] = "Website Url";
					sheet.Cells[4, 2] = "Keywords Found";
					if (config.IncludeDate) {
						sheet.Cells[4, 3] = "Date Discovered";
					}
				} else {
					sheet.Cells[4, 1] = "No results found for enabled keywords";
					continue;
				}

				currentRow = 4;
				ExportProgress.CurrentRow = 0;
				foreach (var result in website.ResultList) {
					if (config.OnlyNewResults && !result.IsNewResult) {
						ExportProgress.CurrentRow++;
						myWorker.ReportProgress(0);
						continue;
					}

					// Go to the next blank row and fill in informations
					currentRow++;
					var rng = sheet.Cells[currentRow, 1] as Excel.Range;
					rng?.Hyperlinks.Add(rng, result.PageUrl, Missing.Value, string.IsNullOrEmpty(result.Context) ? "" : result.Context,
						result.PageUrl);
					var keywords = result.KeywordsOnPage.Aggregate("", (current, keyword) => current + (keyword.Text + ", "));
					var keywordText = keywords.Substring(0, keywords.Length - 2);
					sheet.Cells[currentRow, 2] = keywordText;
					if (config.IncludeDate) {
						var date = "";
						var discoveryDate = result.DiscoveryTimeUtc.ToLocalTime();
						date += discoveryDate.Month + "/";
						date += discoveryDate.Day + "/";
						date += discoveryDate.Year;
						sheet.Cells[currentRow, 3] = date;
					}

					// Update progress information
					ExportProgress.CurrentRow++;
					myWorker.ReportProgress(0);
				}

				// Autofit columns
				var aRange = sheet.UsedRange;
				aRange.Columns.AutoFit();
			}

			// Delete pre-existing "Sheet1"
			workbook.Worksheets["Sheet1"].Delete();

			// Create summary sheet
			Excel.Worksheet summary = workbook.Worksheets.Add(Missing.Value);
			summary.Name = "Summary";

			// General information
			summary.Cells[1, 1] = "Visco Lighting Search Results";
			summary.Cells[2, 1] = "Auto-generated by search application";

			// Settings file information
			summary.Cells[4, 1] = "Run Date";
			summary.Cells[4, 2] = results.LastRan.ToLocalTime().ToShortTimeString() +
				" on " + results.LastRan.ToLocalTime().ToShortDateString();
			summary.Cells[5, 1] = "Total Time";
			summary.Cells[5, 2] = results.GetCrawlTime();

			// Websites searched
			summary.Cells[7, 1] = "Websites Searched";
			summary.Cells[8, 1] = "Name";
			summary.Cells[8, 2] = "Results";
			summary.Cells[8, 3] = "Elapsed Time";
			summary.Cells[8, 4] = "Status";
			summary.Range["A7"].Font.Bold = true;
			currentRow = 8;
			foreach (var website in results.AllResults) {
				currentRow++;
				summary.Cells[currentRow, 1] = website.RootWebsite.Name;
				summary.Cells[currentRow, 3] = website.GetCrawlTime();
				if (!website.StartedSearch) {
					summary.Cells[currentRow, 4] = "Not Started";
				} else {
					if (website.CompletedSearch) {
						summary.Cells[currentRow, 4] = "Completed";
					} else {
						summary.Cells[currentRow, 4] = "Interrupted";
					}
				}

				if (config.OnlyNewResults) {
					summary.Cells[currentRow, 2] = website.ResultList.Count(i => i.IsNewResult);
				} else {
					summary.Cells[currentRow, 2] = website.ResultList.Count;
				}
			}

			// Keywords in search
			currentRow += 2;
			summary.Cells[currentRow, 1] = "Keywords Used";
			summary.Range["A" + currentRow].Font.Bold = true;
			foreach (var keyword in config.PageWords) {
				currentRow++;
				summary.Cells[currentRow, 1] = keyword.Text;
				summary.Cells[currentRow, 2] = (keyword.IsEnabled) ? "Enabled" : "Disabled";
			}

			// Finish formatting
			summary.Range["A1"].Font.Size = 28;
			summary.Range["A1:H1"].Merge();
			summary.Range["A2:H2"].Merge();
			summary.Range["B4:D4"].Merge();
			summary.Range["A:D"].Columns.AutoFit();
			summary.Name = "Summary";
		}

		private void worker_WorkCompleted(object sender, RunWorkerCompletedEventArgs args) {
			btnStatusClose.Text = "Close";
			btnStatusClose.Enabled = true;

			if (isForEmail) {
				excel.Visible = false;
				var date = results.LastRan;
				var filename = Reference.Files.ExportDirectory + "Results_" + date.Month + date.Day + date.Year;

				if (File.Exists(filename + ".xlsx"))
					File.Delete(filename + ".xlsx");

				workbook.SaveAs(filename, Excel.XlFileFormat.xlWorkbookDefault, Type.Missing, Type.Missing, false, false,
					Excel.XlSaveAsAccessMode.xlNoChange, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);
				workbook.Close();
			} else {
				excel.Visible = true;
			}
		}

		private void worker_ProgressChanged(object sender, ProgressChangedEventArgs args) {
			LogHelper.Debug("Sheet: " + ExportProgress.CurrentSheet + "/" + ExportProgress.SheetCount);
			LogHelper.Debug("Row: " + ExportProgress.CurrentRow + "/" + ExportProgress.RowCount);

			progressBook.Minimum = 0;
			progressSheet.Minimum = 0;
			
			progressBook.Maximum = ExportProgress.SheetCount;
			progressSheet.Maximum = ExportProgress.RowCount;

			progressBook.Value = ExportProgress.CurrentSheet;
			progressSheet.Value = ExportProgress.CurrentRow;
		}

		private void ExportToFile() {
			// Indicate the program is saving the file
			btnStatusClose.Text = "Saving...";
			btnStatusClose.Enabled = false;

			switch (config.ExportMethod) {
				case Configuration.ExportType.Excel:
					ExportToExcel(false);
					break;

				case Configuration.ExportType.Plain:
					ExportToPlainText();
					break;

				case Configuration.ExportType.Xml:
					ExportToXml();
					break;

				default:
					throw new ArgumentOutOfRangeException();
			}
		}

		public void ExportToExcel(bool email) {
			isForEmail = email;

			worker.RunWorkerAsync();
		}

		private void ExportToPlainText() {
			throw new NotImplementedException("Plain text file export");
		}

		private void ExportToXml() {
			throw new NotImplementedException("Xml file export");
		}

		private void btnStatusClose_Click(object sender, EventArgs e) {
			Marshal.ReleaseComObject(workbook);
			Marshal.ReleaseComObject(excel);

			Close();
		}
	}

}